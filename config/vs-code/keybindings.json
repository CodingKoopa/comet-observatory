[
  // Unmap word wrap toggle.
  // {
  //   "key": "alt+z",
  //   "command": "-editor.action.toggleWordWrap"
  // },
  // Map terminal kill.
  // {
  //   "key": "alt+z",
  //   "command": "workbench.action.terminal.kill"
  // },
  // {
  //   "key": "alt+z",
  //   "command": "workbench.action.terminal.toggleTerminal"
  // },
  // {
  //   "key": "ctrl+`",
  //   "command": "-workbench.action.terminal.toggleTerminal"
  // },
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Workbench
  /////////////////////////////////////////////////////////////////////////////////////////////////
  // Remap reload window binding, because we don't use developer mode.
  {
    "key": "ctrl+r",
    "command": "-workbench.action.reloadWindow"
  },
  {
    "key": "ctrl+shift+r",
    "command": "workbench.action.reloadWindow",
    "when": "!isInDiffEditor"
  },
  // Disable editor picker bindings, because opening tabs by how recently they were used is
  // unexpected
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.openNextRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenNavigateNextInEditorPicker"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "-workbench.action.openPreviousRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker"
  },
  // Remap editor switching bindings to be consistent with tab switching on the rest of the system.
  {
    "key": "ctrl+pagedown",
    "command": "-workbench.action.nextEditor"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "ctrl+pageup",
    "command": "-workbench.action.previousEditor"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditor"
  },
  // Map run build task binding.
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.tasks.runTask"
  },
  // Map set default build task binding.
  {
    "key": "ctrl+alt+b",
    "command": "workbench.action.tasks.configureDefaultBuildTask"
  },
  // Remap run build task binding.
  {
    "key": "ctrl+shift+b",
    "command": "-workbench.action.tasks.build"
  },
  {
    "key": "ctrl+b",
    "command": "workbench.action.tasks.build",
    "when": "!inCMakeProject && !isWPILibProject"
  },
  // Remap run without debugging.
  {
    "key": "ctrl+f5",
    "command": "-workbench.action.debug.run"
  },
  {
    "key": "f5",
    "command": "workbench.action.debug.run",
    "when": "debuggersAvailable && !inDebugMode && !inCMakeProject && !isWPILibProject"
  },
  // Remap stop debugging.
  // {
  //   "key": "shift+f5",
  //   "command": "-workbench.action.debug.stop",
  // },
  // {
  //   "key": "ctrl+f5",
  //   "command": "workbench.action.debug.stop",
  //   "when": "inDebugMode"
  // },
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Git
  /////////////////////////////////////////////////////////////////////////////////////////////////
  // Disable save as binding.
  {
    "key": "ctrl+shift+s",
    "command": "-workbench.action.files.saveAs"
  },
  // Map stage binding.
  {
    "key": "ctrl+shift+s",
    "command": "git.stageSelectedRanges"
  },
  // Map revert binding.
  {
    "key": "ctrl+shift+r",
    "command": "git.revertSelectedRanges",
    "when": "isInDiffEditor"
  },
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// CMake Tools
  /////////////////////////////////////////////////////////////////////////////////////////////////
  // Remap CMake configure binding.
  {
    "key": "ctrl+shift+b",
    "command": "cmake.configure",
    "when": "inCMakeProject"
  },
  // Unmap sidebar visibility binding.
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  // Remap CMake build binding.
  {
    "key": "f7",
    "command": "-cmake.build"
  },
  {
    "key": "ctrl+b",
    "command": "cmake.build",
    "when": "inCMakeProject"
  },
  // Map CMake set build target binding.
  {
    "key": "ctrl+alt+b",
    "command": "cmake.setDefaultTarget",
    "when": "inCMakeProject"
  },
  // Remap CMake start without debugging binding.
  {
    "key": "shift+f5",
    "command": "-cmake.launchTarget"
  },
  {
    "key": "f5",
    "command": "cmake.launchTarget",
    "when": "inCMakeProject && !inDebugMode"
  },
  // Remap CMake start with debugging binding.
  {
    "key": "ctrl+f5",
    "command": "-cmake.debugTarget"
  },
  {
    "key": "shift+f5",
    "command": "cmake.debugTarget",
    "when": "inCMakeProject && !inDebugMode"
  },
  // Map CMake set launch target binding.
  {
    "key": "alt+f5",
    "command": "cmake.selectLaunchTarget",
    "when": "inCMakeProject && !inDebugMode"
  },
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Java
  /////////////////////////////////////////////////////////////////////////////////////////////////
  // Map Java hot code replace binding.
  // {
  //   "key": "f5",
  //   "command": "java.debug.hotCodeReplace",
  //   "when": "java:serverMode != null && inDebugMode"
  // }
  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// WPILib
  /////////////////////////////////////////////////////////////////////////////////////////////////
  // Map build robot code binding.
  {
    "key": "ctrl+b",
    "command": "wpilibcore.buildCode",
    "when": "isWPILibProject"
  },
  // Map simulate robot code binding.
  {
    "key": "f5",
    "command": "wpilibcore.simulateCode",
    "when": "isWPILibProject && !inDebugMode"
  }
]
